/* tslint:disable */
/* eslint-disable */
/**
 * nuthatch
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  BadRequest,
  BadRequestFromJSON,
  BadRequestToJSON,
  CurrentUser,
  CurrentUserFromJSON,
  CurrentUserToJSON,
  EmailLoginCred,
  EmailLoginCredFromJSON,
  EmailLoginCredToJSON,
  Forbidden,
  ForbiddenFromJSON,
  ForbiddenToJSON,
  NotFound,
  NotFoundFromJSON,
  NotFoundToJSON,
  NotImplemented,
  NotImplementedFromJSON,
  NotImplementedToJSON,
  OAuth1LoginIntent,
  OAuth1LoginIntentFromJSON,
  OAuth1LoginIntentToJSON,
  OAuth1TempCred,
  OAuth1TempCredFromJSON,
  OAuth1TempCredToJSON,
  ServerError,
  ServerErrorFromJSON,
  ServerErrorToJSON,
  Unauthorized,
  UnauthorizedFromJSON,
  UnauthorizedToJSON,
} from '../models';

export interface AuthnOauth1FinishAuthRequest {
  oAuth1TempCred: OAuth1TempCred;
}

export interface AuthnOauth1StartAuthRequest {
  provider: string;
}

export interface PostAuthnPasswordRequest {
  emailLoginCred: EmailLoginCred;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  async authnOauth1FinishAuthRaw(
    requestParameters: AuthnOauth1FinishAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<CurrentUser>> {
    if (requestParameters.oAuth1TempCred === null || requestParameters.oAuth1TempCred === undefined) {
      throw new runtime.RequiredError(
        'oAuth1TempCred',
        'Required parameter requestParameters.oAuth1TempCred was null or undefined when calling authnOauth1FinishAuth.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/authn/oauth1/finish`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: OAuth1TempCredToJSON(requestParameters.oAuth1TempCred),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserFromJSON(jsonValue));
  }

  /**
   */
  async authnOauth1FinishAuth(
    requestParameters: AuthnOauth1FinishAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<CurrentUser> {
    const response = await this.authnOauth1FinishAuthRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async authnOauth1StartAuthRaw(
    requestParameters: AuthnOauth1StartAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<OAuth1LoginIntent>> {
    if (requestParameters.provider === null || requestParameters.provider === undefined) {
      throw new runtime.RequiredError(
        'provider',
        'Required parameter requestParameters.provider was null or undefined when calling authnOauth1StartAuth.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/authn/oauth1/start/{provider}`.replace(
          `{${'provider'}}`,
          encodeURIComponent(String(requestParameters.provider)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => OAuth1LoginIntentFromJSON(jsonValue));
  }

  /**
   */
  async authnOauth1StartAuth(
    requestParameters: AuthnOauth1StartAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<OAuth1LoginIntent> {
    const response = await this.authnOauth1StartAuthRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postAuthnPasswordRaw(
    requestParameters: PostAuthnPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<CurrentUser>> {
    if (requestParameters.emailLoginCred === null || requestParameters.emailLoginCred === undefined) {
      throw new runtime.RequiredError(
        'emailLoginCred',
        'Required parameter requestParameters.emailLoginCred was null or undefined when calling postAuthnPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/authn/password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EmailLoginCredToJSON(requestParameters.emailLoginCred),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserFromJSON(jsonValue));
  }

  /**
   */
  async postAuthnPassword(
    requestParameters: PostAuthnPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<CurrentUser> {
    const response = await this.postAuthnPasswordRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
